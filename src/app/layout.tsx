("");
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "../styles/globals.css";
import { MainNavigation } from "@/components/main-navigation";
import Footer from "@/components/footer";
import SearchContextProvider from "@/contexts/search-context-provider";
import NeighborhoodContextProvider from "@/contexts/neighborhood-context-provider";
import ApartmentContextProvider from "@/contexts/apartment-context-provier";
import CityContextProvider from "@/contexts/city-context-provider";
import FilterContextProvider from "@/contexts/filters-context-provier";
import prisma from "@/lib/db";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  // Fetch neighborhoods from the database
  const neighborhoods = await prisma.neighborhood.findMany();
  // Convert neighborhoods to a plain object
  const plainNeighborhoods = neighborhoods.map((neighborhood) => ({
    ...neighborhood,
    averageRent: neighborhood.averageRent?.toNumber(),
    walkScore: neighborhood.walkScore?.toNumber(),
    commuteTime: neighborhood.commuteTime?.toNumber(),
  }));

  const apartments = await prisma.apartment.findMany();

  // Convert apartments to a plain object
  const plainApartments = apartments.map((apartment) => ({
    ...apartment,
    squareFootage: apartment.squareFootage?.toNumber(),
    monthlyRent: apartment.monthlyRent?.toNumber(),
  }));

  const cities = await prisma.city.findMany();

  // Convert cities to a plain object
  const plainCities = cities.map((city) => ({
    ...city,
    latitude: city.latitude?.toNumber(),
    longitude: city.longitude?.toNumber(),
    area: city.area?.toNumber(),
    walkScore: city.walkScore?.toNumber(),
    commuteTime: city.commuteTime?.toNumber(),
  }));

  return (
    <html lang="en">
      <body
        className={`mx-auto flex min-h-screen flex-col ${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <SearchContextProvider>
          <CityContextProvider data={plainCities}>
            <NeighborhoodContextProvider data={plainNeighborhoods}>
              <FilterContextProvider>
                <ApartmentContextProvider data={plainApartments}>
                  {/* <MainNavigation /> */}
                  {children}
                  {/* <Footer /> */}
                </ApartmentContextProvider>
              </FilterContextProvider>
            </NeighborhoodContextProvider>
          </CityContextProvider>
        </SearchContextProvider>
      </body>
    </html>
  );
}
